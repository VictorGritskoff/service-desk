BEGIN;


CREATE TABLE IF NOT EXISTS databasechangelog
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    author character varying(255) COLLATE pg_catalog."default" NOT NULL,
    filename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    dateexecuted timestamp without time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) COLLATE pg_catalog."default" NOT NULL,
    md5sum character varying(35) COLLATE pg_catalog."default",
    description character varying(255) COLLATE pg_catalog."default",
    comments character varying(255) COLLATE pg_catalog."default",
    tag character varying(255) COLLATE pg_catalog."default",
    liquibase character varying(20) COLLATE pg_catalog."default",
    contexts character varying(255) COLLATE pg_catalog."default",
    labels character varying(255) COLLATE pg_catalog."default",
    deployment_id character varying(10) COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS databasechangeloglock
(
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp without time zone,
    lockedby character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT databasechangeloglock_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_activity_log
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    entity_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    entity_id bigint NOT NULL,
    content text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT now(),
    created_by bigint,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_activity_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_app_settings
(
    setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    setting_value character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    setting_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    setting_group character varying(50) COLLATE pg_catalog."default",
    description character varying(255) COLLATE pg_catalog."default",
    updated_at timestamp without time zone,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_app_settings_pkey PRIMARY KEY (setting_key)
);

CREATE TABLE IF NOT EXISTS fw_authority
(
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    descriptive_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    system_role boolean DEFAULT false,
    description text COLLATE pg_catalog."default",
    tenant_id uuid NOT NULL,
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    CONSTRAINT fw_authority_pkey PRIMARY KEY (name),
    CONSTRAINT fw_authority_descriptive_name_key UNIQUE (descriptive_name)
);

CREATE TABLE IF NOT EXISTS fw_authority_resource_permission
(
    authority_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    resource_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    permission integer NOT NULL,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_authority_resource_permission_pkey PRIMARY KEY (authority_name, resource_name)
);

CREATE TABLE IF NOT EXISTS fw_comment
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    content text COLLATE pg_catalog."default" NOT NULL,
    entity_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    entity_id bigint NOT NULL,
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_comment_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_deduplication_cache
(
    cache_key character varying(255) COLLATE pg_catalog."default" NOT NULL,
    expired_time timestamp with time zone NOT NULL,
    CONSTRAINT fw_deduplication_cache_pkey PRIMARY KEY (cache_key)
);

CREATE TABLE IF NOT EXISTS fw_entity_attachment
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    entity_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    entity_id bigint NOT NULL,
    file_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    file_type character varying(100) COLLATE pg_catalog."default",
    file_size bigint,
    file_url text COLLATE pg_catalog."default" NOT NULL,
    uploaded_at timestamp without time zone NOT NULL,
    tenant_id uuid NOT NULL,
    created_by bigint,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT fw_entity_attachment_pkey PRIMARY KEY (id),
    CONSTRAINT uq_entity_attachment UNIQUE (entity_type, entity_id, file_url)
);

CREATE TABLE IF NOT EXISTS fw_entity_watchers
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    entity_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    entity_id bigint NOT NULL,
    watch_user_id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    created_by bigint,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_entity_watchers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_escalation_tracking
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    ticket_id bigint NOT NULL,
    escalation_level integer NOT NULL,
    escalated_to_user_id bigint,
    escalation_time timestamp with time zone NOT NULL DEFAULT now(),
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_escalation_tracking_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_notification
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    notification_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    user_id bigint NOT NULL,
    is_read boolean NOT NULL DEFAULT false,
    created_by bigint,
    created_at timestamp with time zone,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_notification_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_organization
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default",
    logo_url character varying(255) COLLATE pg_catalog."default",
    slogan character varying(255) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    tenant_id uuid NOT NULL,
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    CONSTRAINT fw_organization_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_project
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    team_id bigint NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::character varying,
    start_date timestamp with time zone,
    end_date timestamp with time zone,
    created_by bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    modified_by bigint,
    modified_at timestamp with time zone NOT NULL DEFAULT now(),
    short_name character varying(10) COLLATE pg_catalog."default" NOT NULL,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_project_pkey PRIMARY KEY (id),
    CONSTRAINT uk_project_short_name UNIQUE (short_name)
);

CREATE TABLE IF NOT EXISTS fw_project_epic
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    project_id bigint NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::character varying,
    priority integer,
    start_date timestamp with time zone,
    end_date timestamp with time zone,
    created_by bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    modified_by bigint,
    modified_at timestamp with time zone NOT NULL DEFAULT now(),
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_project_epic_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_project_iteration
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    project_id bigint NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::character varying,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    created_by bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    modified_by bigint,
    modified_at timestamp with time zone NOT NULL DEFAULT now(),
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_project_iteration_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_project_setting
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    project_id bigint NOT NULL,
    sprint_length_days integer NOT NULL,
    default_priority integer NOT NULL,
    estimation_unit character varying(50) COLLATE pg_catalog."default",
    enable_estimation boolean NOT NULL DEFAULT true,
    integration_settings jsonb,
    created_by bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    modified_by bigint,
    modified_at timestamp with time zone NOT NULL DEFAULT now(),
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_project_setting_pkey PRIMARY KEY (id),
    CONSTRAINT fw_project_setting_project_id_key UNIQUE (project_id)
);

CREATE TABLE IF NOT EXISTS fw_project_ticket_seq
(
    project_id bigint NOT NULL,
    last_ticket_number bigint NOT NULL DEFAULT 0,
    version bigint NOT NULL DEFAULT 0,
    CONSTRAINT fw_project_ticket_seq_pkey PRIMARY KEY (project_id)
);

CREATE TABLE IF NOT EXISTS fw_resource
(
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT fw_resource_pkey PRIMARY KEY (name)
);

CREATE TABLE IF NOT EXISTS fw_team
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default",
    logo_url character varying(500) COLLATE pg_catalog."default",
    slogan character varying(255) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    organization_id bigint,
    tenant_id uuid NOT NULL,
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    CONSTRAINT fw_team_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_team_role
(
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_team_role_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS fw_team_workflow_selection
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    team_id bigint NOT NULL,
    workflow_id bigint NOT NULL,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_team_workflow_selection_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_tenant
(
    id uuid NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    slug character varying(100) COLLATE pg_catalog."default" NOT NULL,
    domain character varying(255) COLLATE pg_catalog."default" NOT NULL,
    access_type character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'SUBDOMAIN'::character varying,
    created_at timestamp without time zone NOT NULL,
    modified_at timestamp without time zone NOT NULL,
    CONSTRAINT fw_tenant_pkey PRIMARY KEY (id),
    CONSTRAINT fw_tenant_domain_key UNIQUE (domain),
    CONSTRAINT fw_tenant_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS fw_ticket
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    team_id bigint NOT NULL,
    workflow_id bigint NOT NULL,
    request_user_id bigint NOT NULL,
    assign_user_id bigint,
    request_title character varying(255) COLLATE pg_catalog."default",
    request_description text COLLATE pg_catalog."default",
    channel character varying(50) COLLATE pg_catalog."default",
    priority integer NOT NULL,
    is_deleted boolean NOT NULL DEFAULT false,
    is_recurring boolean NOT NULL DEFAULT false,
    estimated_completion_date date,
    actual_completion_date date,
    is_new boolean NOT NULL DEFAULT true,
    current_state_id bigint,
    is_completed boolean NOT NULL DEFAULT false,
    project_id bigint,
    iteration_id bigint,
    epic_id bigint,
    size character varying(15) COLLATE pg_catalog."default",
    estimate integer,
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    parent_ticket_id bigint,
    project_ticket_number bigint,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_team_request_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_ticket_conversation_health
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    summary text COLLATE pg_catalog."default",
    ticket_id bigint NOT NULL,
    conversation_health double precision,
    cumulative_sentiment double precision NOT NULL DEFAULT 0.0,
    total_messages integer NOT NULL DEFAULT 0,
    total_questions integer NOT NULL DEFAULT 0,
    resolved_questions integer NOT NULL DEFAULT 0,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_team_request_conversation_health_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_user
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    email character varying(256) COLLATE pg_catalog."default",
    timezone character varying(100) COLLATE pg_catalog."default" DEFAULT 'America/Los_Angeles'::character varying,
    last_login_time timestamp with time zone,
    image_url character varying(256) COLLATE pg_catalog."default",
    role character varying(50) COLLATE pg_catalog."default",
    title character varying(100) COLLATE pg_catalog."default",
    manager_id bigint,
    address character varying(255) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state character varying(100) COLLATE pg_catalog."default",
    country character varying(100) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::character varying,
    is_deleted boolean NOT NULL DEFAULT false,
    lang_key character varying(10) COLLATE pg_catalog."default",
    activation_key character varying(20) COLLATE pg_catalog."default",
    reset_key character varying(20) COLLATE pg_catalog."default",
    about text COLLATE pg_catalog."default",
    reset_date timestamp with time zone,
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_user_pkey PRIMARY KEY (id),
    CONSTRAINT ux_user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS fw_user_auth
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id bigint NOT NULL,
    auth_provider character varying(50) COLLATE pg_catalog."default" NOT NULL,
    provider_user_id character varying(256) COLLATE pg_catalog."default",
    password_hash character varying(61) COLLATE pg_catalog."default",
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_user_auth_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_user_authority
(
    user_id bigint NOT NULL,
    authority_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT fw_user_authority_pkey PRIMARY KEY (user_id, authority_name)
);

CREATE TABLE IF NOT EXISTS fw_user_team
(
    user_id bigint NOT NULL,
    team_id bigint NOT NULL,
    role_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_user_team_pkey PRIMARY KEY (user_id, team_id)
);

CREATE TABLE IF NOT EXISTS fw_workflow
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    request_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    owner_id bigint,
    visibility character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'PRIVATE'::character varying,
    level1_escalation_timeout integer NOT NULL DEFAULT 1000000,
    level2_escalation_timeout integer NOT NULL DEFAULT 1000000,
    level3_escalation_timeout integer NOT NULL DEFAULT 1000000,
    cloned_from_global boolean NOT NULL DEFAULT false,
    use_for_project boolean DEFAULT false,
    tags text COLLATE pg_catalog."default",
    created_by bigint,
    created_at timestamp with time zone,
    modified_by bigint,
    modified_at timestamp with time zone,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_workflow_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_workflow_actions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    transition_id bigint NOT NULL,
    action_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    action_data json,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_workflow_actions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_workflow_state
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    workflow_id bigint NOT NULL,
    state_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    is_initial boolean DEFAULT false,
    is_final boolean DEFAULT false,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_workflow_state_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_workflow_transition
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    workflow_id bigint NOT NULL,
    source_state_id bigint NOT NULL,
    target_state_id bigint NOT NULL,
    event_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    sla_duration bigint,
    escalate_on_violation boolean NOT NULL DEFAULT true,
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_workflow_transition_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS fw_workflow_transition_history
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    ticket_id bigint NOT NULL,
    from_state_id bigint,
    to_state_id bigint NOT NULL,
    event_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    transition_date timestamp with time zone NOT NULL DEFAULT now(),
    sla_due_date timestamp with time zone,
    status character varying(50) COLLATE pg_catalog."default",
    tenant_id uuid NOT NULL,
    CONSTRAINT fw_workflow_transition_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS shedlock
(
    name character varying(64) COLLATE pg_catalog."default" NOT NULL,
    lock_until timestamp without time zone NOT NULL,
    locked_at timestamp without time zone NOT NULL,
    locked_by character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT shedlock_pkey PRIMARY KEY (name)
);

ALTER TABLE IF EXISTS fw_activity_log
    ADD CONSTRAINT fk_activity_log_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_activity_log_tenant_id
    ON  fw_activity_log(tenant_id);


ALTER TABLE IF EXISTS fw_activity_log
    ADD CONSTRAINT fk_activity_log_user FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS fw_app_settings
    ADD CONSTRAINT fk_fw_app_settings_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_app_settings_tenant_id
    ON  fw_app_settings(tenant_id);


ALTER TABLE IF EXISTS fw_authority
    ADD CONSTRAINT fk_authority_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS fw_authority
    ADD CONSTRAINT fk_authority_modified_by FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS fw_authority
    ADD CONSTRAINT fk_fw_authority_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_authority_tenant_id
    ON  fw_authority(tenant_id);


ALTER TABLE IF EXISTS fw_authority_resource_permission
    ADD CONSTRAINT fk_authority_resource_permissions_resource FOREIGN KEY (resource_name)
    REFERENCES  fw_resource (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS fw_authority_resource_permission
    ADD CONSTRAINT fk_authority_resource_permissions_role FOREIGN KEY (authority_name)
    REFERENCES  fw_authority (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS fw_authority_resource_permission
    ADD CONSTRAINT fk_fw_authority_resource_permission_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_authority_resource_permission_tenant_id
    ON  fw_authority_resource_permission(tenant_id);


ALTER TABLE IF EXISTS fw_comment
    ADD CONSTRAINT fk_comment_user FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS fw_comment
    ADD CONSTRAINT fk_fw_comment_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_comment_tenant_id
    ON  fw_comment(tenant_id);


ALTER TABLE IF EXISTS fw_entity_attachment
    ADD CONSTRAINT fk_entity_attachment_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS fw_entity_attachment
    ADD CONSTRAINT fk_fw_entity_attachment_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_entity_attachment_tenant_id
    ON  fw_entity_attachment(tenant_id);


ALTER TABLE IF EXISTS fw_entity_watchers
    ADD CONSTRAINT fk_entity_watchers_user_id FOREIGN KEY (watch_user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS fw_entity_watchers
    ADD CONSTRAINT fk_fw_entity_watchers_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_entity_watchers_tenant_id
    ON  fw_entity_watchers(tenant_id);


ALTER TABLE IF EXISTS fw_escalation_tracking
    ADD CONSTRAINT fk_fw_escalation_tracking_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_escalation_tracking_tenant_id
    ON  fw_escalation_tracking(tenant_id);


ALTER TABLE IF EXISTS  fw_escalation_tracking
    ADD CONSTRAINT fw_escalation_tracking_ticket FOREIGN KEY (ticket_id)
    REFERENCES  fw_ticket (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_escalation_tracking
    ADD CONSTRAINT fw_escalation_tracking_user FOREIGN KEY (escalated_to_user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_notification
    ADD CONSTRAINT fk_fw_notification_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_notification_tenant_id
    ON  fw_notification(tenant_id);


ALTER TABLE IF EXISTS  fw_organization
    ADD CONSTRAINT fk_fw_organization_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_organization_tenant_id
    ON  fw_organization(tenant_id);


ALTER TABLE IF EXISTS  fw_organization
    ADD CONSTRAINT fk_organization_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS  fw_organization
    ADD CONSTRAINT fk_organization_modified_by FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS  fw_project
    ADD CONSTRAINT fk_fw_project_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_project_tenant_id
    ON  fw_project(tenant_id);


ALTER TABLE IF EXISTS  fw_project
    ADD CONSTRAINT fk_project_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project
    ADD CONSTRAINT fk_project_modified_by FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project
    ADD CONSTRAINT fk_project_team FOREIGN KEY (team_id)
    REFERENCES  fw_team (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_project_epic
    ADD CONSTRAINT fk_epic_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project_epic
    ADD CONSTRAINT fk_epic_modified_by FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project_epic
    ADD CONSTRAINT fk_epic_project FOREIGN KEY (project_id)
    REFERENCES  fw_project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_project_epic
    ADD CONSTRAINT fk_fw_project_epic_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_project_epic_tenant_id
    ON  fw_project_epic(tenant_id);


ALTER TABLE IF EXISTS  fw_project_iteration
    ADD CONSTRAINT fk_fw_project_iteration_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_project_iteration_tenant_id
    ON  fw_project_iteration(tenant_id);


ALTER TABLE IF EXISTS  fw_project_iteration
    ADD CONSTRAINT fk_iteration_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project_iteration
    ADD CONSTRAINT fk_iteration_modified_by FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project_iteration
    ADD CONSTRAINT fk_iteration_project FOREIGN KEY (project_id)
    REFERENCES  fw_project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_project_setting
    ADD CONSTRAINT fk_fw_project_setting_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_project_setting_tenant_id
    ON  fw_project_setting(tenant_id);


ALTER TABLE IF EXISTS  fw_project_setting
    ADD CONSTRAINT fk_project_setting_created_by FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project_setting
    ADD CONSTRAINT fk_project_setting_modified_by FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_project_setting
    ADD CONSTRAINT fk_project_setting_project FOREIGN KEY (project_id)
    REFERENCES  fw_project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fw_project_setting_project_id_key
    ON  fw_project_setting(project_id);


ALTER TABLE IF EXISTS  fw_project_ticket_seq
    ADD CONSTRAINT fk_ticket_seq_project FOREIGN KEY (project_id)
    REFERENCES  fw_project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fw_project_ticket_seq_pkey
    ON  fw_project_ticket_seq(project_id);


ALTER TABLE IF EXISTS  fw_team
    ADD CONSTRAINT fk_fw_team_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_team_tenant_id
    ON  fw_team(tenant_id);


ALTER TABLE IF EXISTS  fw_team
    ADD CONSTRAINT fk_teams_organization FOREIGN KEY (organization_id)
    REFERENCES  fw_organization (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_team_role
    ADD CONSTRAINT fk_fw_team_role_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_team_role_tenant_id
    ON  fw_team_role(tenant_id);


ALTER TABLE IF EXISTS  fw_team_workflow_selection
    ADD CONSTRAINT fk_fw_team_workflow_selection_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_team_workflow_selection_tenant_id
    ON  fw_team_workflow_selection(tenant_id);


ALTER TABLE IF EXISTS  fw_team_workflow_selection
    ADD CONSTRAINT fk_team_workflow_selection_team FOREIGN KEY (team_id)
    REFERENCES  fw_team (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_team_workflow_selection
    ADD CONSTRAINT fk_team_workflow_selection_workflow FOREIGN KEY (workflow_id)
    REFERENCES  fw_workflow (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_fw_ticket_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_ticket_tenant_id
    ON  fw_ticket(tenant_id);


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_team_request_assign_user FOREIGN KEY (assign_user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_team_request_epic FOREIGN KEY (epic_id)
    REFERENCES  fw_project_epic (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_team_request_iteration FOREIGN KEY (iteration_id)
    REFERENCES  fw_project_iteration (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_team_request_project FOREIGN KEY (project_id)
    REFERENCES  fw_project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_team_request_request_user FOREIGN KEY (request_user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_team_request_workflow_id FOREIGN KEY (workflow_id)
    REFERENCES  fw_workflow (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_ticket_parent FOREIGN KEY (parent_ticket_id)
    REFERENCES  fw_ticket (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT fk_ticket_team_id FOREIGN KEY (team_id)
    REFERENCES  fw_team (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_ticket
    ADD CONSTRAINT team_request_workflow_state FOREIGN KEY (current_state_id)
    REFERENCES  fw_workflow_state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_ticket_conversation_health
    ADD CONSTRAINT fk_fw_ticket_conversation_health_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_ticket_conversation_health_tenant_id
    ON  fw_ticket_conversation_health(tenant_id);


ALTER TABLE IF EXISTS  fw_ticket_conversation_health
    ADD CONSTRAINT fk_ticket_conversation_health_ticket FOREIGN KEY (ticket_id)
    REFERENCES  fw_ticket (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_user
    ADD CONSTRAINT fk_fw_user_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_user_tenant_id
    ON  fw_user(tenant_id);


ALTER TABLE IF EXISTS  fw_user_auth
    ADD CONSTRAINT fk_fw_user_auth_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_user_auth_tenant_id
    ON  fw_user_auth(tenant_id);


ALTER TABLE IF EXISTS  fw_user_auth
    ADD CONSTRAINT fk_user_auth_user FOREIGN KEY (user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_user_authority
    ADD CONSTRAINT fk_authority_name FOREIGN KEY (authority_name)
    REFERENCES  fw_authority (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_user_authority
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_user_team
    ADD CONSTRAINT fk_fw_user_team_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_user_team_tenant_id
    ON  fw_user_team(tenant_id);


ALTER TABLE IF EXISTS  fw_user_team
    ADD CONSTRAINT fk_user_team_role FOREIGN KEY (role_name)
    REFERENCES  fw_team_role (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_user_team
    ADD CONSTRAINT fk_user_team_team FOREIGN KEY (team_id)
    REFERENCES  fw_team (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_user_team
    ADD CONSTRAINT fk_user_team_user FOREIGN KEY (user_id)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow
    ADD CONSTRAINT fk_fw_workflow_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_workflow_tenant_id
    ON  fw_workflow(tenant_id);


ALTER TABLE IF EXISTS  fw_workflow
    ADD CONSTRAINT fk_workflow_created_by_user FOREIGN KEY (created_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_workflow
    ADD CONSTRAINT fk_workflow_last_modified_by_user FOREIGN KEY (modified_by)
    REFERENCES  fw_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_workflow
    ADD CONSTRAINT fk_workflow_owner_team FOREIGN KEY (owner_id)
    REFERENCES  fw_team (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_actions
    ADD CONSTRAINT fk_fw_workflow_actions_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_workflow_actions_tenant_id
    ON  fw_workflow_actions(tenant_id);


ALTER TABLE IF EXISTS  fw_workflow_actions
    ADD CONSTRAINT fk_workflow_actions_transition FOREIGN KEY (transition_id)
    REFERENCES  fw_workflow_transition (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS  fw_workflow_state
    ADD CONSTRAINT fk_fw_workflow_state_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_workflow_state_tenant_id
    ON  fw_workflow_state(tenant_id);


ALTER TABLE IF EXISTS  fw_workflow_state
    ADD CONSTRAINT fk_workflow_states_workflow FOREIGN KEY (workflow_id)
    REFERENCES  fw_workflow (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_transition
    ADD CONSTRAINT fk_fw_workflow_transition_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_workflow_transition_tenant_id
    ON  fw_workflow_transition(tenant_id);


ALTER TABLE IF EXISTS  fw_workflow_transition
    ADD CONSTRAINT fk_transition_source_state FOREIGN KEY (source_state_id)
    REFERENCES  fw_workflow_state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_transition
    ADD CONSTRAINT fk_transition_target_state FOREIGN KEY (target_state_id)
    REFERENCES  fw_workflow_state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_transition
    ADD CONSTRAINT fk_transition_workflow FOREIGN KEY (workflow_id)
    REFERENCES  fw_workflow (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_transition_history
    ADD CONSTRAINT fk_fw_workflow_transition_history_tenant FOREIGN KEY (tenant_id)
    REFERENCES  fw_tenant (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_fw_workflow_transition_history_tenant_id
    ON  fw_workflow_transition_history(tenant_id);


ALTER TABLE IF EXISTS  fw_workflow_transition_history
    ADD CONSTRAINT fk_transition_history_from_state FOREIGN KEY (from_state_id)
    REFERENCES  fw_workflow_state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_transition_history
    ADD CONSTRAINT fk_transition_history_ticket FOREIGN KEY (ticket_id)
    REFERENCES  fw_ticket (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS  fw_workflow_transition_history
    ADD CONSTRAINT fk_transition_history_to_state FOREIGN KEY (to_state_id)
    REFERENCES  fw_workflow_state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;